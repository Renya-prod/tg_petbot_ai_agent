from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
)
from telegram.ext import (
    ContextTypes,
    ConversationHandler,
    CallbackQueryHandler,
    CommandHandler,
    MessageHandler,
    filters,
)
from services import database as db
from services.llm import generate_post_ideas, generate_post_draft
from handlers import addposts

CHOOSING_IDEA, CHOOSING_STYLE, CONFIRM_DRAFT = range(3)


async def newpost_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if "selected_channel" not in context.user_data:
        await update.message.reply_text("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é")
        return ConversationHandler.END

    channel = context.user_data["selected_channel"]
    if isinstance(channel, dict):
        channel_id, channel_name = channel["channel_id"], channel["name"]
    else:
        channels = db.get_channels_by_name(str(channel))
        if not channels:
            await update.message.reply_text("‚ùå –ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return ConversationHandler.END
        channel_id, channel_name = channels[0]["channel_id"], channels[0]["name"]
        context.user_data["selected_channel"] = channels[0]

    posts = db.get_last_posts(channel_id, limit=5)
    if len(posts) < 3:
        await update.message.reply_text(
            f"‚ö†Ô∏è –í —ç—Ç–æ–º –∫–∞–Ω–∞–ª–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∏–º–µ—Ä–æ–≤ (–Ω–∞–π–¥–µ–Ω–æ {len(posts)}).\n"
            "–î–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–¥–µ–π –Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 3 –ø–æ—Å—Ç–∞.\n"
            "–ù–∞–∂–º–∏—Ç–µ /addposts, —á—Ç–æ–±—ã —Å—Ä–∞–∑—É –¥–æ–±–∞–≤–∏—Ç—å –ø–æ—Å—Ç—ã."
        )
        return ConversationHandler.END

    ideas = await generate_post_ideas([p["text"] for p in posts])
    context.user_data["post_ideas"] = ideas

    keyboard = [
        [InlineKeyboardButton(f"{i+1}. {idea['idea']}", callback_data=f"idea_{i}")]
        for i, idea in enumerate(ideas)
    ]
    keyboard.append([InlineKeyboardButton("‚úè –í–≤–µ—Å—Ç–∏ —Å–≤–æ—é —Ç–µ–º—É", callback_data="custom")])
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        f"–í—ã–±–µ—Ä–∏—Ç–µ –∏–¥–µ—é –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞ –≤ –∫–∞–Ω–∞–ª–µ '{channel_name}':",
        reply_markup=reply_markup,
    )
    return CHOOSING_IDEA


async def choose_idea(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data

    if data == "custom":
        await query.message.reply_text("‚úè –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é —Ç–µ–º—É –¥–ª—è –ø–æ—Å—Ç–∞:")
        context.user_data["custom_idea"] = True
        return CHOOSING_IDEA

    idx = int(data.replace("idea_", ""))
    selected = context.user_data["post_ideas"][idx]
    context.user_data["selected_idea"] = selected["idea"]
    context.user_data["available_styles"] = selected["styles"]

    return await show_styles(query, context)


async def custom_idea_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.user_data.get("custom_idea"):
        return ConversationHandler.END

    text = update.message.text.strip()
    if not text:
        await update.message.reply_text("‚ùå –¢–µ–º–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:")
        return CHOOSING_IDEA

    context.user_data["selected_idea"] = text
    context.user_data["available_styles"] = ["–Æ–º–æ—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π", "–°–µ—Ä—å—ë–∑–Ω—ã–π", "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π"]
    return await show_styles(update, context)


async def show_styles(update_or_query, context):
    styles = context.user_data.get("available_styles", [])
    keyboard = [
        [InlineKeyboardButton(style, callback_data=f"style_{style}")]
        for style in styles
    ]
    keyboard.append([InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_to_ideas")])
    reply_markup = InlineKeyboardMarkup(keyboard)

    if hasattr(update_or_query, "message"):
        await update_or_query.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å –ø–æ—Å—Ç–∞:", reply_markup=reply_markup)
    else:
        await update_or_query.effective_message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å –ø–æ—Å—Ç–∞:", reply_markup=reply_markup)
    return CHOOSING_STYLE


async def back_to_ideas(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    ideas = context.user_data.get("post_ideas", [])
    keyboard = [
        [InlineKeyboardButton(f"{i+1}. {idea['idea']}", callback_data=f"idea_{i}")]
        for i, idea in enumerate(ideas)
    ]
    keyboard.append([InlineKeyboardButton("‚úè –í–≤–µ—Å—Ç–∏ —Å–≤–æ—é —Ç–µ–º—É", callback_data="custom")])
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.message.reply_text("‚¨Ö –í–µ—Ä–Ω—É–ª–∏—Å—å –∫ –≤—ã–±–æ—Ä—É –∏–¥–µ–∏:", reply_markup=reply_markup)
    return CHOOSING_IDEA


async def choose_style(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    style = query.data.replace("style_", "")
    context.user_data["selected_style"] = style

    channel = context.user_data.get("selected_channel")
    if isinstance(channel, dict):
        channel_id, channel_name = channel["channel_id"], channel["name"]
    else:
        channels = db.get_channels_by_name(str(channel))
        if not channels:
            await query.message.reply_text("‚ùå –ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return ConversationHandler.END
        channel_id, channel_name = channels[0]["channel_id"], channels[0]["name"]
        context.user_data["selected_channel"] = channels[0]

    idea = context.user_data["selected_idea"]
    posts = db.get_last_posts(channel_id, limit=5)
    draft = await generate_post_draft(channel_name, idea, style, [p["text"] for p in posts])
    context.user_data["draft_post"] = draft

    keyboard = [
        [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_draft")],
        [InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_to_styles")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.message.reply_text(f"‚úÖ –ß–µ—Ä–Ω–æ–≤–∏–∫ –≥–æ—Ç–æ–≤!\n\n{draft}", reply_markup=reply_markup)
    return CONFIRM_DRAFT


async def back_to_styles(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    return await show_styles(query, context)


async def confirm_draft(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    channel = context.user_data["selected_channel"]
    if isinstance(channel, dict):
        channel_id = channel["channel_id"]
    else:
        channel_id = db.get_channels_by_name(str(channel))[0]["channel_id"]

    idea = context.user_data["selected_idea"]
    style = context.user_data["selected_style"]
    draft = context.user_data["draft_post"]

    db.add_post(channel_id, idea, style, draft)
    await query.message.reply_text("üíæ –ß–µ—Ä–Ω–æ–≤–∏–∫ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω!")

    return ConversationHandler.END

async def addposts_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    return await addposts.addposts_command(update, context)


def setup_newpost_handlers(app):
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("newpost", newpost_command)],
        states={
            CHOOSING_IDEA: [
                CallbackQueryHandler(choose_idea, pattern="^idea_"),
                CallbackQueryHandler(choose_idea, pattern="^custom$"),
                MessageHandler(filters.TEXT & ~filters.COMMAND, custom_idea_input),
            ],
            CHOOSING_STYLE: [
                CallbackQueryHandler(choose_style, pattern="^style_"),
                CallbackQueryHandler(back_to_ideas, pattern="^back_to_ideas$"),
            ],
            CONFIRM_DRAFT: [
                CallbackQueryHandler(confirm_draft, pattern="^confirm_draft$"),
                CallbackQueryHandler(back_to_styles, pattern="^back_to_styles$"),
            ],
        },
        fallbacks=[CommandHandler("start", lambda u, c: None)],
        allow_reentry=True,
    )
    app.add_handler(conv_handler)
