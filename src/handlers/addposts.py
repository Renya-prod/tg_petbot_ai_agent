# handlers/addposts.py

import csv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import (
    ContextTypes,
    ConversationHandler,
    CallbackQueryHandler,
    CommandHandler,
    MessageHandler,
    filters,
)
from services import database as db

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
CHOOSING_METHOD, MANUAL_INPUT, FILE_INPUT = range(3)


# ----------------------
# –°—Ç–∞—Ä—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ—Å—Ç–æ–≤
# ----------------------
async def addposts_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if "selected_channel" not in context.user_data:
        await update.message.reply_text("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª –∫–æ–º–∞–Ω–¥–æ–π /start")
        return ConversationHandler.END

    channel = context.user_data["selected_channel"]

    keyboard = [
        [InlineKeyboardButton("‚úç –í—Ä—É—á–Ω—É—é", callback_data="add_manual")],
        [InlineKeyboardButton("üìÇ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª (.txt / .csv)", callback_data="add_file")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        f"–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–æ–≤ –≤ –∫–∞–Ω–∞–ª: {channel['name']}",
        reply_markup=reply_markup
    )
    return CHOOSING_METHOD


# ----------------------
# –†—É—á–Ω–æ–π –≤–≤–æ–¥
# ----------------------
async def add_manual(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    keyboard = [[InlineKeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data="done_manual")]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.message.reply_text(
        "‚úç –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–æ—Å—Ç—ã –ø–æ –æ–¥–Ω–æ–º—É.\n"
        "–í –∫–æ–Ω—Ü–µ —É–∫–∞–∂–∏—Ç–µ —Å—Ç–∏–ª—å —á–µ—Ä–µ–∑ '–°—Ç–∏–ª—å: <–Ω–∞–∑–≤–∞–Ω–∏–µ>' –∏–ª–∏ –æ—Å—Ç–∞–≤—å—Ç–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.\n\n"
        "–ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /done",
        reply_markup=reply_markup
    )
    return MANUAL_INPUT


async def save_manual_post(update: Update, context: ContextTypes.DEFAULT_TYPE):
    channel = context.user_data["selected_channel"]
    text = update.message.text

    # –†–∞–∑–±–æ—Ä —Å—Ç–∏–ª—è
    style = "—Ä—É—á–Ω–æ–π –≤–≤–æ–¥"
    if "\n–°—Ç–∏–ª—å:" in text:
        parts = text.rsplit("\n–°—Ç–∏–ª—å:", 1)
        text = parts[0].strip()
        style = parts[1].strip()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
    db.add_post(channel["channel_id"], "–ü–æ—Å—Ç –ø—Ä–∏–¥—É–º–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º", style, text)

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    await update.message.reply_text(
        f"‚úÖ –ü–æ—Å—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ –∫–∞–Ω–∞–ª '{channel['name']}' —Å–æ —Å—Ç–∏–ª–µ–º '{style}'.\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π –ø–æ—Å—Ç –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å."
    )

    return MANUAL_INPUT


async def done_manual(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.", reply_markup=ReplyKeyboardRemove())
    return ConversationHandler.END


async def done_manual_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await query.message.reply_text("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.")
    return ConversationHandler.END


# ----------------------
# –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞
# ----------------------
async def add_file(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    await query.message.reply_text(
        "üìÇ –ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–∞–π–ª .txt –∏–ª–∏ .csv.\n\n"
        "‚ñ™ –í .txt –∫–∞–∂–¥–∞—è —Å—Ç—Ä–æ–∫–∞ ‚Äî –æ—Ç–¥–µ–ª—å–Ω—ã–π –ø–æ—Å—Ç.\n"
        "‚ñ™ –í .csv –ø–µ—Ä–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ ‚Äî —Ç–µ–∫—Å—Ç, –≤—Ç–æ—Ä–∞—è (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ) ‚Äî —Å—Ç–∏–ª—å."
    )
    return FILE_INPUT


def parse_line_style(line: str):
    style = "—Ä—É—á–Ω–æ–π –≤–≤–æ–¥"
    if "–°—Ç–∏–ª—å:" in line:
        parts = line.rsplit("–°—Ç–∏–ª—å:", 1)
        text = parts[0].strip()
        style = parts[1].strip()
    else:
        text = line.strip()
    return text, style


async def handle_file(update: Update, context: ContextTypes.DEFAULT_TYPE):
    channel = context.user_data["selected_channel"]
    document = update.message.document
    if not document:
        await update.message.reply_text("‚ö†Ô∏è –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return FILE_INPUT

    file = await document.get_file()
    file_path = await file.download_to_drive()

    saved_posts = 0
    if document.file_name.endswith(".txt"):
        with open(file_path, "r", encoding="utf-8") as f:
            for line in f:
                if line.strip():
                    text, style = parse_line_style(line)
                    db.add_post(channel["channel_id"], "–ü–æ—Å—Ç –ø—Ä–∏–¥—É–º–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º", style, text)
                    saved_posts += 1
    elif document.file_name.endswith(".csv"):
        with open(file_path, newline="", encoding="utf-8") as f:
            reader = csv.reader(f)
            for row in reader:
                if row:
                    if len(row) == 1:
                        text, style = parse_line_style(row[0])
                    else:
                        text, style = row[0], row[1]
                    db.add_post(channel["channel_id"], "–ü–æ—Å—Ç –ø—Ä–∏–¥—É–º–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º", style, text.strip())
                    saved_posts += 1
    else:
        await update.message.reply_text("‚ö†Ô∏è –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ .txt –∏ .csv —Ñ–∞–π–ª—ã")
        return FILE_INPUT

    await update.message.reply_text(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {saved_posts} –ø–æ—Å—Ç–æ–≤ –≤ –∫–∞–Ω–∞–ª '{channel['name']}'.")
    return ConversationHandler.END


# ----------------------
# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤
# ----------------------
def setup_addposts_handlers(app):
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("addposts", addposts_command)],
        states={
            CHOOSING_METHOD: [
                CallbackQueryHandler(add_manual, pattern="^add_manual$"),
                CallbackQueryHandler(add_file, pattern="^add_file$"),
            ],
            MANUAL_INPUT: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, save_manual_post),
                CommandHandler("done", done_manual),
                CallbackQueryHandler(done_manual_button, pattern="^done_manual$"),
            ],
            FILE_INPUT: [
                MessageHandler(filters.Document.ALL, handle_file),
            ],
        },
        fallbacks=[CommandHandler("start", lambda u, c: None)],
        allow_reentry=True,
    )

    app.add_handler(conv_handler, group=0)  # <<< –≥—Ä—É–ø–ø–∞ 0
