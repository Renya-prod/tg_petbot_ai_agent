import csv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import (
    ContextTypes,
    ConversationHandler,
    CallbackQueryHandler,
    CommandHandler,
    MessageHandler,
    filters,
)
from services import database as db


CHOOSING_METHOD, MANUAL_INPUT, FILE_INPUT = range(3)


async def addposts_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.callback_query:
        query = update.callback_query
        await query.answer()
        message = query.message
    else:
        message = update.message

    if "selected_channel" not in context.user_data:
        await message.reply_text("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª –∫–æ–º–∞–Ω–¥–æ–π /start")
        return ConversationHandler.END

    channel = context.user_data["selected_channel"]

    if isinstance(channel, dict):
        channel_name = channel["name"]
    else:
        channel_name = str(channel)

    keyboard = [
        [InlineKeyboardButton("‚úç –í—Ä—É—á–Ω—É—é", callback_data="add_manual")],
        [InlineKeyboardButton("üìÇ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª (.txt / .csv)", callback_data="add_file")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await message.reply_text(
        f"üìù *–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–æ–≤ –≤ –∫–∞–Ω–∞–ª:* '{channel_name}'\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ—Å—Ç–æ–≤:\n"
        "‚Ä¢ –í—Ä—É—á–Ω—É—é ‚Äî –≤—Å—Ç–∞–≤–ª—è–π—Ç–µ —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–æ–≤ –ø—Ä—è–º–æ –≤ —á–∞—Ç –ø–æ –æ–¥–Ω–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é.\n"
        "‚Ä¢ –§–∞–π–ª ‚Äî –∑–∞–≥—Ä—É–∑–∏—Ç–µ .txt –∏–ª–∏ .csv —Å –ø–æ—Å—Ç–∞–º–∏, —è –∏—Ö —Å–æ—Ö—Ä–∞–Ω—é.\n\n"
        "–ü–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–µ –º–µ–Ω–µ–µ 3 –ø–æ—Å—Ç–æ–≤, –≤—ã —Å–º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –Ω–æ–≤—ã–µ –∏–¥–µ–∏ –∏ –ø–æ—Å—Ç—ã –¥–ª—è —ç—Ç–æ–≥–æ –∫–∞–Ω–∞–ª–∞.",
        reply_markup=reply_markup
    )
    return CHOOSING_METHOD


async def add_manual(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    keyboard = [[InlineKeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data="done_manual")]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.message.reply_text(
        "‚úç –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–æ—Å—Ç—ã –ø–æ –æ–¥–Ω–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é.\n"
        "–í –∫–æ–Ω—Ü–µ –º–æ–∂–µ—Ç–µ —É–∫–∞–∑–∞—Ç—å —Å—Ç–∏–ª—å —á–µ—Ä–µ–∑ '–°—Ç–∏–ª—å: <–Ω–∞–∑–≤–∞–Ω–∏–µ>' –∏–ª–∏ –æ—Å—Ç–∞–≤—å—Ç–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.\n\n"
        "–ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /done",
        reply_markup=reply_markup
    )
    return MANUAL_INPUT


async def save_manual_post(update: Update, context: ContextTypes.DEFAULT_TYPE):
    channel = context.user_data["selected_channel"]
    text = update.message.text

    style = "—Ä—É—á–Ω–æ–π –≤–≤–æ–¥"
    if "\n–°—Ç–∏–ª—å:" in text:
        parts = text.rsplit("\n–°—Ç–∏–ª—å:", 1)
        text = parts[0].strip()
        style = parts[1].strip()

    db.add_post(channel["channel_id"], "–ü–æ—Å—Ç –ø—Ä–∏–¥—É–º–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º", style, text)

    await update.message.reply_text(
        f"‚úÖ –ü–æ—Å—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ –∫–∞–Ω–∞–ª '{channel['name']}' —Å–æ —Å—Ç–∏–ª–µ–º '{style}'.\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π –ø–æ—Å—Ç –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É /done, —á—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ."
    )

    return MANUAL_INPUT


async def done_manual(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
            [KeyboardButton("/newpost"), KeyboardButton("/addposts")],
            [KeyboardButton("/back")]
        ]
    await update.message.reply_text(
        "‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.\n\n"
        "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø–æ—Å—Ç –¥–ª—è —ç—Ç–æ–≥–æ –∫–∞–Ω–∞–ª–∞ /newpost \n"
        "–ò–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é /back",
        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    )
    return ConversationHandler.END


async def done_manual_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    keyboard = [
            [KeyboardButton("/newpost"), KeyboardButton("/addposts")],
            [KeyboardButton("/back")]
        ]
    await update.message.reply_text(
        "‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.\n\n"
        "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø–æ—Å—Ç –¥–ª—è —ç—Ç–æ–≥–æ –∫–∞–Ω–∞–ª–∞ /newpost \n"
        "–ò–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é /back",
        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    )
    return ConversationHandler.END


async def add_file(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    await query.message.reply_text(
        "üìÇ –ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–∞–π–ª .txt –∏–ª–∏ .csv.\n\n"
        "‚ñ™ –í .txt –ø–æ—Å—Ç—ã —Å—á–∏—Ç—ã–≤–∞—é—Ç—Å—è —Å–ª–µ–¥—É—é—â–∏–º –æ–±—Ä–∞–∑–æ–º: \n"
            '   –ü–æ—Å—Ç:\n' 
            "   '—Ç–µ–∫—Å—Ç –ø–µ—Ä–≤–æ–≥–æ –ø–æ—Å—Ç–∞'\n"
            '   –°—Ç–∏–ª—å:\n'
            "   '—Å—Ç–∏–ª—å –ø–µ—Ä–≤–æ–≥–æ –ø–æ—Å—Ç–∞'\n"
            '   –ü–æ—Å—Ç:\n' 
            "   '—Ç–µ–∫—Å—Ç –≤—Ç–æ—Ä–æ–≥–æ –ø–æ—Å—Ç–∞'\n"
            '   –∏ —Ç.–¥. –ø–æ –∞–Ω–∞–ª–æ–≥–∏–∏...\n\n'
        "‚ñ™ –í .csv –ø–µ—Ä–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ ‚Äî —Ç–µ–∫—Å—Ç, –≤—Ç–æ—Ä–∞—è (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ) ‚Äî —Å—Ç–∏–ª—å."
    )
    return FILE_INPUT


def parse_line_style(line: str):
    style = "—Ä—É—á–Ω–æ–π –≤–≤–æ–¥"
    if "–°—Ç–∏–ª—å:" in line:
        parts = line.rsplit("–°—Ç–∏–ª—å:", 1)
        text = parts[0].strip()
        style = parts[1].strip()
    else:
        text = line.strip()
    return text, style


async def handle_file(update: Update, context: ContextTypes.DEFAULT_TYPE):
    channel = context.user_data["selected_channel"]
    document = update.message.document
    if not document:
        await update.message.reply_text("‚ö†Ô∏è –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return FILE_INPUT

    file = await document.get_file()
    file_path = await file.download_to_drive()

    saved_posts = 0
    if document.file_name.endswith(".txt"):
        with open(file_path, "r", encoding="utf-8") as f:
            content = f.read()

        blocks = content.split("–ü–æ—Å—Ç:")
        for block in blocks:
            block = block.strip()
            if not block:
                continue

            if "–°—Ç–∏–ª—å:" in block:
                text_part, style_part = block.split("–°—Ç–∏–ª—å:", 1)
                text = text_part.strip().strip('"')
                style = style_part.strip().strip('"')
            else:
                text = block.strip().strip('"')
                style = "—Ä—É—á–Ω–æ–π –≤–≤–æ–¥"

            if text:
                db.add_post(channel["channel_id"], "–ü–æ—Å—Ç –ø—Ä–∏–¥—É–º–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º", style, text)
                saved_posts += 1

    elif document.file_name.endswith(".csv"):
        with open(file_path, newline="", encoding="utf-8") as f:
            reader = csv.reader(f)
            for row in reader:
                if row:
                    if len(row) == 1:
                        text, style = parse_line_style(row[0])
                    else:
                        text, style = row[0], row[1]
                    db.add_post(channel["channel_id"], "–ü–æ—Å—Ç –ø—Ä–∏–¥—É–º–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º", style, text.strip())
                    saved_posts += 1
    else:
        await update.message.reply_text("‚ö†Ô∏è –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ .txt –∏ .csv —Ñ–∞–π–ª—ã")
        return FILE_INPUT

    keyboard = [
            [KeyboardButton("/newpost"), KeyboardButton("/addposts")],
            [KeyboardButton("/back")]
        ]

    await update.message.reply_text(
        f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {saved_posts} –ø–æ—Å—Ç–æ–≤ –≤ –∫–∞–Ω–∞–ª '{channel['name']}'."
        "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø–æ—Å—Ç –¥–ª—è —ç—Ç–æ–≥–æ –∫–∞–Ω–∞–ª–∞ –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    )
    return ConversationHandler.END


def setup_addposts_handlers(app):
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("addposts", addposts_command)],
        states={
            CHOOSING_METHOD: [
                CallbackQueryHandler(add_manual, pattern="^add_manual$"),
                CallbackQueryHandler(add_file, pattern="^add_file$"),
            ],
            MANUAL_INPUT: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, save_manual_post),
                CommandHandler("done", done_manual),
                CallbackQueryHandler(done_manual_button, pattern="^done_manual$"),
            ],
            FILE_INPUT: [
                MessageHandler(filters.Document.ALL, handle_file),
            ],
        },
        fallbacks=[CommandHandler("start", lambda u, c: None)],
        allow_reentry=True,
    )

    app.add_handler(conv_handler, group=0)
