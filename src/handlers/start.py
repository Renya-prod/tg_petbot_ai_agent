# handlers/start.py

from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import ContextTypes, CommandHandler, MessageHandler, filters
from services import database as db

# ---------------------------
# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
# ---------------------------
def get_channel_keyboard(user_id: int, include_choose=True):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤—ã–±–æ—Ä–∞ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤.
    include_choose: –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –ª–∏ –∫–Ω–æ–ø–∫—É 'üìÇ –í—ã–±—Ä–∞—Ç—å –∫–∞–Ω–∞–ª' –µ—Å–ª–∏ –µ—Å—Ç—å –∫–∞–Ω–∞–ª—ã
    """
    channels = db.get_channels(user_id)
    keyboard = []

    if include_choose and channels:
        keyboard.append([KeyboardButton("üìÇ –í—ã–±—Ä–∞—Ç—å –∫–∞–Ω–∞–ª")])

    keyboard.append([KeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª")])
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

# ---------------------------
# –ö–æ–º–∞–Ω–¥–∞ /start
# ---------------------------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    db.add_user(user.id, user.username)
    db_user = db.get_user(user.id)

    keyboard_markup = get_channel_keyboard(db_user["user_id"])
    channels = db.get_channels(db_user["user_id"])

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    context.user_data["state"] = None
    context.user_data["awaiting_channel_name"] = False
    context.user_data["awaiting_channel_selection"] = False

    if not channels:
        await update.message.reply_text(
            f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.username} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–∏—Å—Ç–µ–º—É.\n"
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫–∞–Ω–∞–ª–æ–≤. –î–æ–±–∞–≤—å—Ç–µ –∫–∞–Ω–∞–ª, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.",
            reply_markup=keyboard_markup
        )
    else:
        await update.message.reply_text(
            f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.username}!\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª –¥–ª—è —Ä–∞–±–æ—Ç—ã:",
            reply_markup=keyboard_markup
        )

# ---------------------------
# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–µ—Ä —Ç–µ–∫—Å—Ç–∞
# ---------------------------
async def text_parser(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    db_user = db.get_user(user.id)
    text = update.message.text.strip()

    # ----------------------------
    # 0. –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã /newpost –∏ /addposts –∏ —Å—Ü–µ–Ω–∞—Ä–∏–∏
    # ----------------------------
    if text.startswith("/newpost") or text.startswith("/addposts") or text.startswith("/done"):
        return  # –ü—É—Å—Ç—å CommandHandler –∏–ª–∏ ConversationHandler –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å—Ü–µ–Ω–∞—Ä–∏–∏ addposts/newpost ‚Äî –Ω–µ –º–µ—à–∞–µ–º
    if context.user_data.get("state") in ["addposts", "newpost"]:
        return

    # ----------------------------
    # 1. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞
    # ----------------------------
    if context.user_data.get("awaiting_channel_name"):
        channel_name = text
        db.add_channel(db_user["user_id"], channel_name)
        context.user_data["awaiting_channel_name"] = False

        reply_markup = get_channel_keyboard(db_user["user_id"])
        await update.message.reply_text(
            f"‚úÖ –ö–∞–Ω–∞–ª '{channel_name}' –¥–æ–±–∞–≤–ª–µ–Ω!\n–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –∫–∞–Ω–∞–ª –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –µ—â—ë –æ–¥–∏–Ω.",
            reply_markup=reply_markup
        )
        return

    # ----------------------------
    # 2. –í—ã–±–æ—Ä –∫–∞–Ω–∞–ª–∞
    # ----------------------------
    if context.user_data.get("awaiting_channel_selection"):
        channel_name = text
        channels = db.get_channels(db_user["user_id"])
        channel = next((ch for ch in channels if ch["name"] == channel_name), None)

        if not channel:
            await update.message.reply_text("‚ùå –ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return

        context.user_data["selected_channel"] = channel
        context.user_data["awaiting_channel_selection"] = False

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã
        keyboard = [[KeyboardButton("/newpost"), KeyboardButton("/addposts")]]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text(
            f"‚úÖ –í—ã–±—Ä–∞–Ω –∫–∞–Ω–∞–ª '{channel_name}'.\n–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã /newpost –∏–ª–∏ /addposts.",
            reply_markup=reply_markup
        )
        return

    # ----------------------------
    # 3. –ö–Ω–æ–ø–∫–∏ "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª" –∏ "üìÇ –í—ã–±—Ä–∞—Ç—å –∫–∞–Ω–∞–ª"
    # ----------------------------
    if text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª":
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å:")
        context.user_data["awaiting_channel_name"] = True
        return

    if text == "üìÇ –í—ã–±—Ä–∞—Ç—å –∫–∞–Ω–∞–ª":
        channels = db.get_channels(db_user["user_id"])
        if not channels:
            await update.message.reply_text("‚ùó –£ –≤–∞—Å –Ω–µ—Ç –∫–∞–Ω–∞–ª–æ–≤. –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –∫–∞–Ω–∞–ª —á–µ—Ä–µ–∑ '‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª'.")
            return

        keyboard = [[KeyboardButton(ch["name"])] for ch in channels]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª –¥–ª—è —Ä–∞–±–æ—Ç—ã:", reply_markup=reply_markup)
        context.user_data["awaiting_channel_selection"] = True
        return

    # ----------------------------
    # 4. –õ—é–±–æ–π –¥—Ä—É–≥–æ–π —Ç–µ–∫—Å—Ç
    # ----------------------------
    if context.user_data.get("state") not in ["addposts", "newpost"]:
        await update.message.reply_text("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è.")

# ---------------------------
# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤
# ---------------------------
def setup_start_handlers(app):
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, text_parser), group=1)

